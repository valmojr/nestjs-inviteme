generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id          String   @id @unique @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  avatarId    String?
  email       String?  @unique
  password    String?
  bannerColor String?
  displayName String?
  username    String   @unique
  discordId   String?  @unique
  banner      String?
  ownedEvents Event[]  @relation("UserToOwnedEvents")
  roles       Role[]
  groups      Group[]  @relation("GroupToUser")
  houses      House[]  @relation("HouseToUser")
  events      Event[]  @relation("UserToAttendedEvents")
}

model Role {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  userId    String?
  groupID   String?
  eventID   String?
  event     Event?   @relation(fields: [eventID], references: [id])
  group     Group?   @relation(fields: [groupID], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Group {
  id                   String   @id @unique @default(cuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  name                 String
  roleIDs              String[]
  fatherGroupID        String?
  eventID              String
  thumbnailId          String?
  isFatherGroupOfEvent Event?   @relation("fatherGroupToEvent")
  event                Event    @relation("GroupsToEvent", fields: [eventID], references: [id])
  fatherGroup          Group?   @relation("GroupToFatherGroup", fields: [fatherGroupID], references: [id])
  childGroups          Group[]  @relation("GroupToFatherGroup")
  roles                Role[]
  users                User[]   @relation("GroupToUser")
}

model Event {
  id          String     @id @unique @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  mainGroupID String?    @unique
  location    String?
  description String?
  endDate     DateTime?
  ownerID     String
  startDate   DateTime
  thumbnailId String?
  visibility  Visibility
  mainGroup   Group?     @relation("fatherGroupToEvent", fields: [mainGroupID], references: [id])
  owner       User       @relation("UserToOwnedEvents", fields: [ownerID], references: [id])
  groups      Group[]    @relation("GroupsToEvent")
  Role        Role[]
  House       House[]    @relation("EventToHouse")
  users       User[]     @relation("UserToAttendedEvents")
}

model House {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  avatar    String?
  public    Boolean
  discordId String?  @unique
  banner    String?
  events    Event[]  @relation("EventToHouse")
  users     User[]   @relation("HouseToUser")
}

model Image {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  filepath  String
}

enum Visibility {
  PRIVATE
  UNLISTED
  PUBLIC
}
